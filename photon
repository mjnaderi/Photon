#!/usr/bin/env python3

#    Photon
#    Copyright (C) 2015  Mohammad Javad Naderi <mjnaderi@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

'''Organize your photos and videos by date in folders.

Photon is a simple command line tool for organizing photos and
videos in folders, and putting all photos and videos taken with
different cameras in one place ordered by time. It extracts date
and time of photos and videos (from filename, or image attributes,
or file modification time) and classifies them in folders (one
folder for each month).

Example Usage:

    Add
        alias photon="python3 PATH/TO/photon"
    to your .bashrc

    Suppose your directory structure is like this:
    (organized_photos is empty at the beginning.)
    .
    ├─ organized_photos
    ├─ new_photos
    └─ ...
    For adding new photos (photos in new_photos folder) to your
    organized photos, run:

        photon cp new_photos organized_photos
    
    The above command copies files from `new_photos` to `organized_photos`.
    If you want to move files instead of copying, run:

        photon mv new_photos organized_photos

Warning:

    If you are not sure about what will happen after running the command, first use
    --dry-run flag, and if everything was ok, then run the command without --dry-run.

I use:

    photon mv --jalali --chars fa --pattern "{y}/{m} - {M}/{t}{y}-{m}-{d} {h}-{mi}-{s}" --max-size 2000 SRC DES

'''

import sys
import os
import shutil
import re
import jalali as jalali_py
import argparse
import sh
from PIL import Image, ImageDraw, ImageFont
from PIL.ExifTags import TAGS
from datetime import datetime, timedelta

photon_dir = os.path.dirname(__file__)
args = None

# source: http://www.blog.pythonlibrary.org/2010/03/28/getting-photo-metadata-exif-using-python/
def get_exif_datetime(fn):
    try:
        i = Image.open(fn)
    except OSError:
        return ''
    return i._getexif().get(0x9003, '')  # DateTimeOriginal

EN_DIGITS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
FA_DIGITS = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹']

MONTH_NAMES = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
FA_MONTH_NAMES = ['فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند']

DEFAULT_PATTERN = "{y}/{m} - {M}/{original_name}"
EXAMPLE_PATTERN = "{y}/{m} - {M}/{y}-{m}-{d} {h}:{mi}:{s}"

PHOTON_PLACEHOLDER = ' PHOTON-VIDEO-PLACEHOLDER.jpg'

VIDEO_FORMATS = ['mp4', 'avi', '3gp', 'mpeg', 'mkv', 'wmv', ]
IMAGE_FORMATS = ['jpg', 'jpeg', 'png', 'gif', ]
ALL_FORMATS = VIDEO_FORMATS + IMAGE_FORMATS


class Color:
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    DARKCYAN = '\033[36m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'


def error(msg):
    print(Color.RED + msg + Color.END)


def info(msg):
    if args.verbose:
        print(Color.BLUE + msg + Color.END)


def info2(msg):
    if args.verbose:
        print(Color.PURPLE + msg + Color.END)


def fa_chars(s):
    s = str(s)
    for i in range(10):
        s = re.sub(EN_DIGITS[i], FA_DIGITS[i], s)
    return s


def en_chars(s):
    s = str(s)
    for i in range(10):
        s = re.sub(FA_DIGITS[i], EN_DIGITS[i], s)
    return s


def pad(n, k):
    n = str(n)
    if len(n) >= k:
        return n[:k]
    while len(n) < k:
        n = '0' + n
    return n


def create_placeholder_image(path, text):
    image = Image.new("RGBA", (600,450), (245,245,245))
    draw = ImageDraw.Draw(image)
    font = ImageFont.truetype(os.path.join(photon_dir, "font/Hasklig-Light.otf"), 40)
    draw.text((160, 150), "Video Here", (10,10,10), font=font)
    draw.text((20, 200), text, (10,10,10), font=font)
    # img_resized = image.resize((188,45), Image.ANTIALIAS)
    image.save(path, "JPEG")


def reformat_file(cmd, file_path, org_dir, options):

    filename = os.path.split(file_path)[-1]
    filename_we, ext = os.path.splitext(filename)
    ext = ext[1:]

    if ext.lower() in IMAGE_FORMATS:
        file_type = 'Image'
    elif ext.lower() in VIDEO_FORMATS:
        file_type = 'Video'
    else:
        error('✗ {}: FAILED: invalid file extension: "{}". Nothing done... '.format(file_path, ext))
        return


    if filename.endswith(PHOTON_PLACEHOLDER):
        if cmd == 'mv':
            if not options['dry_run']:
                os.remove(file_path)
                info2('✔ {} removed'.format(file_path))
            else:
                info2('✔ [DRY-RUN] {} will be removed'.format(file_path))
        return

    # Extract datetime of file
    # first try: use file name
    pattern = r'.*?(\d\d\d\d)\D?(\d\d)\D?(\d\d)\D+(\d\d)\D?(\d\d)\D?(\d\d).*'
    m = re.match(pattern, filename_we)
    if not m:    
        # second try: use exif metadata of photo
        try:
            m = re.match(pattern, get_exif_datetime(file_path))
        except AttributeError:
            m = None
        if not m:
            # third try: get file modify time from os
            m = re.match(pattern, str(datetime.fromtimestamp(os.path.getmtime(file_path))))
            if not m:
                error('✗ {}: FAILED: cannot extract datetime from file. Nothing done... '.format(file_path))
                return

    year = int(m.group(1))
    month = int(m.group(2))
    day = int(m.group(3))
    hour = int(m.group(4))
    minute = int(m.group(5))
    second = int(m.group(6))

    #dt = datetime(year, month, day, hour, minute, second)
    #td = timedelta(days=27)
    #dt += td
    #year = dt.year
    #month = dt.month
    #day = dt.day
    #hour = dt.hour
    #minute = dt.minute
    #second = dt.second

    if options['jalali'] and year > 1900:
        # convert to Persian date
        year, month, day = jalali_py.Gregorian(year, month, day).persian_tuple()

    month_name = FA_MONTH_NAMES[month-1] if options['jalali'] else MONTH_NAMES[month-1]

    year = pad(year, 4)
    month = pad(month, 2)
    day = pad(day, 2)
    hour = pad(hour, 2)
    minute = pad(minute, 2)
    second = pad(second, 2)

    if options['chars'] == 'fa':
        year = fa_chars(year)
        month = fa_chars(month)
        day = fa_chars(day)
        hour = fa_chars(hour)
        minute = fa_chars(minute)
        second = fa_chars(second)

    relative_filepath_we = options['pattern'].format(
        y=year,
        m=month,
        M=month_name,
        d=day,
        h=hour,
        mi=minute,
        s=second,
        original_name=filename_we,
        t= 'Videos/' if file_type == 'Video' else ''
    )

    un = ''
    uni = 1
    while file_path != os.path.join(org_dir, relative_filepath_we + un + '.' + ext) and os.path.exists(os.path.join(org_dir, relative_filepath_we + un + '.' + ext)):
        error('[DUPLICATE] file with same name exists: {}'.format(os.path.join(org_dir, relative_filepath_we + un + '.' + ext)))
        un = '-' + str(uni)
        uni += 1
    relative_filepath_we += un
            

    new_filepath = os.path.join(org_dir, relative_filepath_we + '.' + ext)
    new_dir, new_filename = os.path.split(new_filepath)

    try:
        if new_filepath != file_path:
            if not os.path.exists(new_dir):
                if not options['dry_run']:
                    os.makedirs(new_dir, mode=0o755, exist_ok=True)
                    info('✔ Directory {} created'.format(new_dir))
                else:
                    info('✔ [DRY-RUN] Directory {} will be created'.format(new_dir))
            if cmd == 'mv':
                if not options['dry_run']:
                    os.rename(file_path, new_filepath)
                    info('✔ {} moved to {}'.format(file_path, new_filepath))
                else:
                    info('✔ [DRY-RUN] {} will be moved to {}'.format(file_path, new_filepath))
            elif cmd == 'cp':
                if not options['dry_run']:
                    shutil.copy2(file_path, new_filepath)
                    info('✔ {} copied to {}'.format(file_path, new_filepath))
                else:
                    info('✔ [DRY-RUN] {} will be copied to {}'.format(file_path, new_filepath))
            else:
                error("Wrong command. (This never happens.)")
                return
        if ext.lower() in VIDEO_FORMATS and options['video_placeholder']:
            placeholder_path = os.path.join(org_dir, relative_filepath_we + PHOTON_PLACEHOLDER)
            if not os.path.exists(placeholder_path):
                if not options['dry_run']:
                    create_placeholder_image(placeholder_path, en_chars(new_filename))
                    info2('✔ {} created'.format(placeholder_path))
                else:
                    info2('✔ [DRY-RUN] {} will be created'.format(placeholder_path))
        if not ext.lower() in VIDEO_FORMATS and options['max_size']:
            if not options['dry_run']:
                sh.convert(new_filepath, "-resize", options['max_size']+">" , new_filepath)
                info2('✔ {} resized to {}'.format(new_filepath, options['max_size']))
            else:
                info2('✔ [DRY-RUN] {} will be resized to {}'.format(new_filepath, options['max_size']))
    except PermissionError:
        error('✗ {}: FAILED: Permission Denied'.format(file_path))
        return


def reformat_dir(cmd, path, org_dir, options):

    if os.path.isfile(path):
        return reformat_file(cmd, path, org_dir, options)

    if os.path.isdir(path):
        files = os.listdir(path)
        for f in files:
            reformat_dir(cmd, os.path.join(path, f), org_dir, options)


def main():
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('--jalali', dest='jalali', action='store_true', help="convert dates to Persian (use Persian dates in organized file names)")
    parser.add_argument('--video-placeholder', dest='video_placeholder', action='store_true', help="create a placeholder image for videos")
    parser.add_argument('--chars', dest='chars', default='en', choices=['fa', 'en'], help="use Fa/En characters for digits in file names (default: en)")
    parser.add_argument('--max-size', metavar="MAX_SIZE", dest='max_size', default=None, nargs='?', help="maximum size of images")
    parser.add_argument('--dry-run', dest='dry_run', action='store_true', help="do not copy or move files. just print what will happen")
    parser.add_argument('--verbose', dest='verbose', action='store_true', help="print info messages")
    parser.add_argument('--pattern', metavar="PATTERN", dest='pattern', nargs='?',
        default=DEFAULT_PATTERN,
        help="use PATTERN for file paths\ndefault: \"{}\"\nexample: \"{}\"".format(DEFAULT_PATTERN, EXAMPLE_PATTERN))
    parser.add_argument('cmd', metavar='CMD', choices=['mv', 'cp'], help="{mv,cp}\nmv: move files to ORG_DIR\ncp: copy files to ORG_DIR")
    parser.add_argument('target', metavar="TARGET", default=".", help="file or folder to be organized")
    parser.add_argument('org_dir', metavar="ORG_DIR", default=".", help="folder to save organized files")
    
    global args
    args = parser.parse_args()

    if not os.path.exists(args.target):
        error('Target ({}) does not exist'.format(args.target))
        return

    if not os.path.exists(args.org_dir):
        error('Organize path ({}) does not exist'.format(args.org_dir))
        return

    options = {
        'jalali': args.jalali,
        'chars': args.chars,
        'dry_run': args.dry_run,
        'pattern': args.pattern,
        'max_size': args.max_size,
        'video_placeholder': args.video_placeholder,
    }

    reformat_dir(args.cmd, args.target, args.org_dir, options)
    
    print('Done!')


if __name__ == '__main__':
    main()
